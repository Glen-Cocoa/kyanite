module.exports = [{"since":"v0.1.0","deprecated":false,"category":"Array","title":"compact","desc":"Takes an array of items and removes all of the falsy values","examples":["compact([1, '', 0, 2]) // => [1, 2]\rcompact([1, '', false, 2, undefined, 3, null]) // => [1, 2, 3]"],"returns":[{"type":{"names":["Array"]},"description":"The stripped array"}],"params":[{"type":{"names":["Array"]},"description":"The array to remove falsy values from","name":"arr"}],"syntax":"compact(arr)","usage":{"commonjs":{"title":"CommonJs","code":"const compact = require('kyanite/compact')"},"standard":{"title":"Standard","code":"import compact from 'kyanite/compact'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/compact.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/compact.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"concat","desc":"Take an array and concats the values into a new array","examples":["concat([[1, 2], [3, 4], [5, 6]]) // => [1, 2, 3, 4, 5, 6]"],"returns":[{"type":{"names":["Array"]},"description":"A newly created array of the concated values"}],"params":[{"type":{"names":["Array"]},"description":"The array to concat together","name":"arr"}],"syntax":"concat(arr)","usage":{"commonjs":{"title":"CommonJs","code":"const concat = require('kyanite/concat')"},"standard":{"title":"Standard","code":"import concat from 'kyanite/concat'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/concat.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/concat.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"concatMap","desc":"Take an array and concats the values into a new array after applying the function","examples":["concatMap(x => [x, x], [1, 2, 3]) // => [1, 1, 2, 2, 3, 3]\r\r// It's also curried\r\rconst con = concatMap(x => [x, x])\r\rcon([1, 2, 3]) // => [1, 1, 2, 2, 3, 3]"],"returns":[{"type":{"names":["Array"]},"description":"A newly created array of the concated values"}],"params":[{"type":{"names":["function"]},"description":"The function to be applied to each value","name":"fn"},{"type":{"names":["Array"]},"description":"The array to concat together","name":"arr"}],"syntax":"concatMap(fn, arr)","usage":{"commonjs":{"title":"CommonJs","code":"const concatMap = require('kyanite/concatMap')"},"standard":{"title":"Standard","code":"import concatMap from 'kyanite/concatMap'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/concatMap.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/concatMap.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"contains","desc":"Checks to see if the provided list contains at at least 1 of the provided value within it","examples":["contains(3, [1, 2, 3]); // => true\r\r// It is also curried\r\rconst checker = contains(3);\r\rchecker([1, 2, 3]); // => true"],"returns":[{"type":{"names":["Boolean"]},"description":"A Boolean based on if the value is found or not"}],"params":[{"type":{"names":["Any"]},"description":"The value we want to search the list for","name":"a"},{"type":{"names":["Array"]},"description":"The list we want to search through","name":"list"}],"syntax":"contains(a, list)","usage":{"commonjs":{"title":"CommonJs","code":"const contains = require('kyanite/contains')"},"standard":{"title":"Standard","code":"import contains from 'kyanite/contains'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/contains.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/contains.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"difference","desc":"Returns an array with the elements present in the first that are not in the second","examples":["difference([1, 2, 3], [1]); // => [2, 3];\r\r// It's also curried\rconst diff = difference([1, 2, 3]);\r\rdiff([1]); // => [2, 3]"],"returns":[{"type":{"names":["Array"]},"description":"An array of elements present in the first that are not in the second"}],"params":[{"type":{"names":["Array"]},"description":"The list to search through","name":"first"},{"type":{"names":["Array"]},"description":"The second list to compare against","name":"second"}],"syntax":"difference(first, second)","usage":{"commonjs":{"title":"CommonJs","code":"const difference = require('kyanite/difference')"},"standard":{"title":"Standard","code":"import difference from 'kyanite/difference'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/difference.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/difference.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"ensureArray","desc":"Ensures that the value passed in is an array, if not it will make it an array or\rpass back an empty array if the value if undefined/null","examples":["ensureArray(1); // => [1]\rensureArray(); // => []\rensureArray(null); // => []\rensureArray('test'); // => ['test']"],"returns":[{"type":{"names":["Array"]},"description":"Returns a new array"}],"params":[{"type":{"names":["Any"]},"description":"The value to ensure","name":"x"}],"syntax":"ensureArray(x)","usage":{"commonjs":{"title":"CommonJs","code":"const ensureArray = require('kyanite/ensureArray')"},"standard":{"title":"Standard","code":"import ensureArray from 'kyanite/ensureArray'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/ensureArray.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/ensureArray.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"every","desc":"Loops through a provided list verifying that every value evaluates to a truthy value.","examples":["const data = [1, 2, 3, 4];\r\revery(x => x > 0, data); // => true\revery(x => x < 3, data); // => false\r\r// It is also curried\r\rconst run = every(x => x > 0);\r\rrun([1, 2, 3]); // => true\rrun([-1, 0, 1]); // => false"],"returns":[{"type":{"names":["Boolean"]},"description":"If all values passed will return true else false"}],"params":[{"type":{"names":["function"]},"description":"The function to send our values to for validation","name":"fn"},{"type":{"names":["Array"]},"description":"The list we are to loop through","name":"x"}],"syntax":"every(fn, x)","usage":{"commonjs":{"title":"CommonJs","code":"const every = require('kyanite/every')"},"standard":{"title":"Standard","code":"import every from 'kyanite/every'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/every.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/every.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"filter","desc":"Filter through a filterable data piece using the provided function","examples":["const isEven = n => n % 2 === 0;\r\rfilter(isEven, [1, 2, 3, 4]); // => [2, 4]\r\r// Is also curried\r\rconst filterer = filter(isEven);\r\rfilterer([1, 2, 3, 4]); // => [2, 4]"],"returns":[{"type":{"names":["Array","Object"]},"description":"Returns a new Array or Object based on the type of list provided"}],"params":[{"type":{"names":["function"]},"description":"The predicate function to run on our values","name":"fn"},{"type":{"names":["Array","Object"]},"description":"The filterable list to go through","name":"list"}],"syntax":"filter(fn, list)","usage":{"commonjs":{"title":"CommonJs","code":"const filter = require('kyanite/filter')"},"standard":{"title":"Standard","code":"import filter from 'kyanite/filter'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/filter.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/filter.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"find","desc":"Find an item based on the function sent in and its list","examples":["find(v => v.val === 'test', [{val: 'test'}]) // => 'test'\rfind(v => v.val === 'none', [{val: 'test'}, {val: 'none'}]) // => { val: 'none' }\rfind(v => v > 2, [1, 2, 3, 4, 5]) // => 3\r\r// find is also curried\r\rconst finder = find(v => v.val === 'test')\r\rfinder([{val: 'test'}]) // => 'test'\rfinder([{val: 'test'}, {val: 'none'}]) // => { val: 'test' }"],"returns":[{"type":{"names":["Any"]},"description":"Returns either the found item, or false if nothing is found"}],"params":[{"type":{"names":["function"]},"description":"The function used/called during the find","name":"fn"},{"type":{"names":["Array"]},"description":"The list we want to search through","name":"list"}],"syntax":"find(fn, list)","usage":{"commonjs":{"title":"CommonJs","code":"const find = require('kyanite/find')"},"standard":{"title":"Standard","code":"import find from 'kyanite/find'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/find.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/find.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"first","desc":"Grabs the first index of a passed array or string","examples":["const arr = first([1, 3]); // => 1\rconst str = first('abc'); // => 'a'"],"returns":[{"type":{"names":["Any"]},"description":"Returns whatever was the first piece of our array"}],"params":[{"type":{"names":["Array","String"]},"description":"The list or string we want to use","name":"x"}],"syntax":"first(x)","usage":{"commonjs":{"title":"CommonJs","code":"const first = require('kyanite/first')"},"standard":{"title":"Standard","code":"import first from 'kyanite/first'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/first.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/first.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"insert","desc":"Insert an item in a certain index of an array","examples":["insert(2, 'x', [1, 2, 3, 4]) // => [1, 2, 'x', 3, 4]\r\r// It's also curried\r\rconst ins = insert(2)\r\rins('x', [1, 2, 3, 4]) // => [1, 2, 'x', 3, 4]"],"returns":[{"type":{"names":["Array"]},"description":"A new array with the inserted data"}],"params":[{"type":{"names":["Number"]},"description":"The index number to remove from","name":"i"},{"type":{"names":["Any"]},"description":"The data we are going to be inserting","name":"d"},{"type":{"names":["Array"]},"description":"The array to insert into","name":"arr"}],"syntax":"insert(i, d, arr)","usage":{"commonjs":{"title":"CommonJs","code":"const insert = require('kyanite/insert')"},"standard":{"title":"Standard","code":"import insert from 'kyanite/insert'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/insert.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/insert.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"intersection","desc":"Returns an array containing elements present in both arrays","examples":["intersection([1, 2, 3, 4], [3, 4, 5, 6]); // => [3, 4]\r\r// It's also curried\r\rconst inter = intersection([1, 2, 3, 4]);\r\rinter([3, 4, 5, 6]); // => [3, 4]"],"returns":[{"type":{"names":["Array"]},"description":"A new array containing values that both arrays had"}],"params":[{"type":{"names":["Array"]},"description":"Our first array value to compare with","name":"a"},{"type":{"names":["Array"]},"description":"Our second array value to compare with","name":"b"}],"syntax":"intersection(a, b)","usage":{"commonjs":{"title":"CommonJs","code":"const intersection = require('kyanite/intersection')"},"standard":{"title":"Standard","code":"import intersection from 'kyanite/intersection'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/intersection.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/intersection.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"last","desc":"Grabs the last index of an array","examples":["const arr = last([1, 3]); // => 3\rconst str = last('abc'); // => 'c'"],"returns":[{"type":{"names":["Any"]},"description":"Returns whatever was the last piece of our array"}],"params":[{"type":{"names":["Array","String"]},"description":"The list or string we want to use","name":"x"}],"syntax":"last(x)","usage":{"commonjs":{"title":"CommonJs","code":"const last = require('kyanite/last')"},"standard":{"title":"Standard","code":"import last from 'kyanite/last'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/last.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/last.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"length","desc":"Obtains the length of the passed array","examples":["length([1, 2, 3, 4]); // => 4\rlength([]); // => 0"],"returns":[{"type":{"names":["Number"]},"description":"The length of the array"}],"params":[{"type":{"names":["Array"]},"description":"The array to find the length of","name":"a"}],"syntax":"length(a)","usage":{"commonjs":{"title":"CommonJs","code":"const length = require('kyanite/length')"},"standard":{"title":"Standard","code":"import length from 'kyanite/length'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/length.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/length.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"map","desc":"Takes a function and applies it to all of the values within the provided list,\rand brings back a new list of the same type.","examples":["const dbl = n => n * 2;\r\rmap(dbl, [1, 2, 3]); // => [2, 4, 6]\r\r// It's also curried\r\rconst dbler = map(dbl);\r\rdbler([1, 2, 3]); // => [2, 4, 6]"],"returns":[{"type":{"names":["Array","Object"]},"description":"The new Array or Object that was created"}],"params":[{"type":{"names":["function"]},"description":"The function to run against the values in our functor","name":"fn"},{"type":{"names":["Array","Object"]},"description":"The list to iterate through","name":"list"}],"syntax":"map(fn, list)","usage":{"commonjs":{"title":"CommonJs","code":"const map = require('kyanite/map')"},"standard":{"title":"Standard","code":"import map from 'kyanite/map'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/map.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/map.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"max","desc":"Goes through an array of values and grabs the last value of the array when it's been sorted","examples":["max([1, 3, 2, 5, 4]); // => 5\rmax(['c', 'a', 'b', 'f']); // => 'f'"],"returns":[{"type":{"names":["Any"]},"description":"Returns the item at the end of an array based on what's passed in"}],"params":[{"type":{"names":["Array"]},"description":"The Array to sort and grab from","name":"x"}],"syntax":"max(x)","usage":{"commonjs":{"title":"CommonJs","code":"const max = require('kyanite/max')"},"standard":{"title":"Standard","code":"import max from 'kyanite/max'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/max.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/max.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"mean","desc":"Get the mean of a set of numbers","examples":["mean([1, 2, 3, 2]); // => 2\rmean([]); // => NaN\rmean(); // => NaN"],"returns":[{"type":{"names":["Number"]},"description":"Returns the mean avg of the numbers"}],"params":[{"type":{"names":["Array"]},"description":"An amount of numbers to get the mean from","name":"x"}],"syntax":"mean(x)","usage":{"commonjs":{"title":"CommonJs","code":"const mean = require('kyanite/mean')"},"standard":{"title":"Standard","code":"import mean from 'kyanite/mean'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/mean.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/mean.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"min","desc":"Goes through an array of values and grabs the first value of the array when it's been sorted","examples":["min([1, 3, 2, 5, 4]); // => 1\rmin(['c', 'a', 'b', 'f']); // => 'a'"],"returns":[{"type":{"names":["Any"]},"description":"Returns the item at the start of an array based on what's passed in"}],"params":[{"type":{"names":["Array"]},"description":"The Array to sort and grab from","name":"x"}],"syntax":"min(x)","usage":{"commonjs":{"title":"CommonJs","code":"const min = require('kyanite/min')"},"standard":{"title":"Standard","code":"import min from 'kyanite/min'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/min.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/min.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"nth","desc":"Returns the nth element of the given list or string.","examples":["nth(3, [1, 2, 3, 4, 5, 6, 7]); // => 4\r\r// nth is curried\r\rconst third = nth(2);\r\rthird([1, 2, 3, 4, 5]); // => 3"],"returns":[{"type":{"names":["Number"]},"description":"Returns the value of the found index"}],"params":[{"type":{"names":["Number"]},"description":"How much to offset the value","name":"o"},{"type":{"names":["Array"]},"description":"The Array or list to crawl through","name":"x"}],"syntax":"nth(o, x)","usage":{"commonjs":{"title":"CommonJs","code":"const nth = require('kyanite/nth')"},"standard":{"title":"Standard","code":"import nth from 'kyanite/nth'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/nth.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/nth.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"partition","desc":"Takes a predicate function and a list or filterable data object and returns the pair.\rOne contains the data which passed the predicate function, the other the values that did not.","examples":["partition(is(String), ['foo', 'bar', 100]); // => [ ['foo', 'bar'], [100] ]\r\r// Is curried as well\r\rconst part = partition(is(String));\r\rpart(['foo', 'bar', 100]); // => [ ['foo', 'bar'], [100] ]"],"returns":[{"type":{"names":["Array"]},"description":"An array containing the first set of elements that passed the predicate function,\rAnd a second that did not"}],"params":[{"type":{"names":["function"]},"description":"The predicate function to determine which side an element belongs to","name":"fn"},{"type":{"names":["Array"]},"description":"The list or other filterable to partition through","name":"list"}],"syntax":"partition(fn, list)","usage":{"commonjs":{"title":"CommonJs","code":"const partition = require('kyanite/partition')"},"standard":{"title":"Standard","code":"import partition from 'kyanite/partition'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/partition.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/partition.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"prepend","desc":"Returns a new list with the provided value at the front of the given list","examples":["prepend('testing', ['is', 'cool']) // => ['testing', 'is', 'cool']\r\r// It's curried\r\rconst pender = prepend('testing')\r\rpender(['is', 'cool']); // => ['testing', 'is', 'cool']"],"returns":[{"type":{"names":["Array"]},"description":"A new array"}],"params":[{"type":{"names":["Any"]},"description":"The value we want to put at the front of our list","name":"x"},{"type":{"names":["Array"]},"description":"The Array or list to prepend to","name":"list"}],"syntax":"prepend(x, list)","usage":{"commonjs":{"title":"CommonJs","code":"const prepend = require('kyanite/prepend')"},"standard":{"title":"Standard","code":"import prepend from 'kyanite/prepend'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/prepend.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/prepend.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"reduce","desc":"Accepts an array and runs a reduce based on the passed values","examples":["reduce((acc, n) => acc + n, 0, [1, 2, 3, 4, 5]); // => 15\rreduce((acc, n) => {\r\n    if (typeof n === 'number') {\r\n      acc.push(n);\r\n    }\r\n\r\n    return acc;\r\n  }, [], ['', 1, 2, '0', 3]); // => [1, 2, 3]"],"returns":[{"type":{"names":["Any"]},"description":"Returns based on the original init parameter that is passed in"}],"params":[{"type":{"names":["function"]},"description":"The function to run with the reduce","name":"fn"},{"type":{"names":["Any"]},"description":"The empty initial state of the reduce accumulator","name":"init"},{"type":{"names":["Array"]},"description":"The list to run our reduce against","name":"list"}],"syntax":"reduce(fn, init, list)","usage":{"commonjs":{"title":"CommonJs","code":"const reduce = require('kyanite/reduce')"},"standard":{"title":"Standard","code":"import reduce from 'kyanite/reduce'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/reduce.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/reduce.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"reject","desc":"Filter through a filterable data piece using the provided function returns only those that fail the function test","examples":["const isEven = n => n % 2 === 0;\r\rreject(isEven, [1, 2, 3, 4]); // => [1, 3]\r\r// Is also curried\r\rconst rejecter = reject(isEven);\r\rrejecter([1, 2, 3, 4]); // => [1, 3]"],"returns":[{"type":{"names":["Array"]},"description":"Returns a new Array or Object based on the type of list provided"}],"params":[{"type":{"names":["function"]},"description":"The predicate function to run on our values","name":"fn"},{"type":{"names":["Array"]},"description":"The filterable list to go through","name":"list"}],"syntax":"reject(fn, list)","usage":{"commonjs":{"title":"CommonJs","code":"const reject = require('kyanite/reject')"},"standard":{"title":"Standard","code":"import reject from 'kyanite/reject'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/reject.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/reject.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"remove","desc":"Remove an item from a certain point in the index","examples":["const test = remove(2, [1, 2, 3, 4]); // => [1, 2, 4]\r\r// This is also a curried method\r\rconst remover = remove(2);\rconst test = remover([1, 2, 3, 4]); // => [1, 2, 4]"],"returns":[{"type":{"names":["Array"]},"description":"returns the modified array back"}],"params":[{"type":{"names":["Number"]},"description":"The index number to remove from","name":"i"},{"type":{"names":["Array"]},"description":"The array in question","name":"x"}],"syntax":"remove(i, x)","usage":{"commonjs":{"title":"CommonJs","code":"const remove = require('kyanite/remove')"},"standard":{"title":"Standard","code":"import remove from 'kyanite/remove'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/remove.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/remove.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"reverse","desc":"Accepts an array and returns a brand new reversed array","examples":["reverse([1, 2, 3]); // => [3, 2, 1]\rreverse([]); // => []"],"returns":[{"type":{"names":["Array"]},"description":"A new reversed array"}],"params":[{"type":{"names":["Array"]},"description":"The array to reverse","name":"arr"}],"syntax":"reverse(arr)","usage":{"commonjs":{"title":"CommonJs","code":"const reverse = require('kyanite/reverse')"},"standard":{"title":"Standard","code":"import reverse from 'kyanite/reverse'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/reverse.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/reverse.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"slice","desc":"Returns a subset of an array based on the provided indexes","examples":["slice(1, 3, [1, 2, 3, 4, 5]); // => [2, 3]\r\r// It is curried\r\rconst slicer = slice(1, 3);\r\rslicer([1, 2, 3, 4, 5]); // => [2, 3]"],"returns":[{"type":{"names":["Array"]},"description":"The newly created subset Array"}],"params":[{"type":{"names":["Number"]},"description":"The index at which to begin extraction","name":"a"},{"type":{"names":["Number"]},"description":"The index for what the extraction goes to. However does not extract","name":"b"}],"syntax":"slice(a, b)","usage":{"commonjs":{"title":"CommonJs","code":"const slice = require('kyanite/slice')"},"standard":{"title":"Standard","code":"import slice from 'kyanite/slice'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/slice.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/slice.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"some","desc":"Loops through a provided list verifying that at least some values evaluates to a truthy value.","examples":["const data = [1, 2, 3, 4]\r\rsome(x => x > 0, data) // => true\rsome(x => x < 3) // => true\rsome(x => x < 0, data) // => false\r\r// It is also curried\r\rconst run = some(x => x > 0)\r\rrun([1, 2, 3]) // => true\rrun([-1, 0, 1]) // => true\rrun([-3, -2, -1]) // => false"],"returns":[{"type":{"names":["Boolean"]},"description":"If any values passed will return true else false"}],"params":[{"type":{"names":["function"]},"description":"The function to send our values to for validation","name":"fn"},{"type":{"names":["Array"]},"description":"The list we are to loop through","name":"x"}],"syntax":"some(fn, x)","usage":{"commonjs":{"title":"CommonJs","code":"const some = require('kyanite/some')"},"standard":{"title":"Standard","code":"import some from 'kyanite/some'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/some.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/some.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"sort","desc":"Uses a comparison function to sort an array","examples":["sort((a, b) => a - b, [99, 23, 10, 53, 1]); // => [1, 10, 23, 53, 99]\r\r// It's also curried\r\rconst sorter = sort((a, b) => a - b);\r\rsorter([99, 23, 10, 53, 1]); // => [1, 10, 23, 53, 99]\rsorter([5, 3, 4, 6, 2, 1]); // => [1, 2, 3, 4, 5, 6]"],"returns":[{"type":{"names":["Array"]},"description":"A new sorted array"}],"params":[{"type":{"names":["function"]},"description":"The function used to sort the array","name":"fn"},{"type":{"names":["Array"]},"description":"The array to be sorted","name":"a"}],"syntax":"sort(fn, a)","usage":{"commonjs":{"title":"CommonJs","code":"const sort = require('kyanite/sort')"},"standard":{"title":"Standard","code":"import sort from 'kyanite/sort'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/sort.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/sort.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"union","desc":"Creates a union between two arrays, removing duplicates from each","examples":["union([1, 2, 3], [3, 4, 5]); // => [1, 2, 3, 4, 5]\runion([1, 2, 3], [[3, 4, 5], [4, 5, 6]]); // => [1, 2, 3, 4, 5, 6]\r\r// It's also curried\r\rconst un = union([1, 2, 3]);\r\run([3, 4, 5]); // => [1, 2, 3, 4, 5]\run([[3, 4, 5], [4, 5, 6]]); // => [1, 2, 3, 4, 5, 6]"],"returns":[{"type":{"names":["Array"]},"description":"A new array of unique values from each of the passed in arrays"}],"params":[{"type":{"names":["Array"]},"description":"An array to put through combining","name":"a"},{"type":{"names":["Array"]},"description":"The rest of the arrays","name":"rest"}],"syntax":"union(a, rest)","usage":{"commonjs":{"title":"CommonJs","code":"const union = require('kyanite/union')"},"standard":{"title":"Standard","code":"import union from 'kyanite/union'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/union.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/union.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"uniq","desc":"Returns an array of unique values from the applied function","examples":["uniq([1, 2, 2, 3, 3, 4, 5]); // => [1, 2, 3, 4, 5]"],"returns":[{"type":{"names":["Array"]},"description":"An array of uniq values from the provided function"}],"params":[{"type":{"names":["Array"]},"description":"The list to sift through","name":"list"}],"syntax":"uniq(list)","usage":{"commonjs":{"title":"CommonJs","code":"const uniq = require('kyanite/uniq')"},"standard":{"title":"Standard","code":"import uniq from 'kyanite/uniq'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/uniq.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/uniq.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"uniqBy","desc":"Returns an array of unique values from the applied function","examples":["uniqBy(x => x > 2, [1, 2, 3, 4, 5]); // => [3, 4, 5]\r\r// It is also curried\r\rconst uq = uniqBy(x => x > 2);\r\ruq([1, 2, 3, 4, 5]); // => [3, 4, 5]"],"returns":[{"type":{"names":["Array"]},"description":"An array of unique values from the provided function"}],"params":[{"type":{"names":["function"]},"description":"The function to apply","name":"fn"},{"type":{"names":["Array"]},"description":"The list to sift through","name":"list"}],"syntax":"uniqBy(fn, list)","usage":{"commonjs":{"title":"CommonJs","code":"const uniqBy = require('kyanite/uniqBy')"},"standard":{"title":"Standard","code":"import uniqBy from 'kyanite/uniqBy'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/uniqBy.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/uniqBy.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Array","title":"update","desc":"Add an item to an array within a certain index of the array","examples":["update(2, 10, [1, 2, 3]); // => [1, 2, 10]\r\r// You can also use it as a curried method\r\rconst updater = update(2, 10);\r\rupdater([1, 2, 3]); // => [1, 2, 10]\r\r// This can be taken further like so\r\rconst index = update(2);\rconst val = index(10);\rval([1, 2, 3]); // => [1, 2, 10]"],"returns":[{"type":{"names":["Array"]},"description":"Returns the modified array"}],"params":[{"type":{"names":["Number"]},"description":"The index number to add at","name":"index"},{"type":{"names":["Any"]},"description":"What we want to add to our array","name":"val"},{"type":{"names":["Array"]},"description":"The array in question","name":"list"}],"syntax":"update(index, val, list)","usage":{"commonjs":{"title":"CommonJs","code":"const update = require('kyanite/update')"},"standard":{"title":"Standard","code":"import update from 'kyanite/update'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/update.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/update.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Function","title":"and","desc":"Runs an and comparison on the two values passed in","examples":["and(true, true); // => true\rand(true, false); // => false\rand(false, false); // => false"],"returns":[{"type":{"names":["Boolean"]},"description":"The evaluated outcome of the parameters"}],"params":[{"type":{"names":["Boolean"]},"description":"The first boolean to compare","name":"a"},{"type":{"names":["Boolean"]},"description":"The second boolean to compare","name":"b"}],"syntax":"and(a, b)","usage":{"commonjs":{"title":"CommonJs","code":"const and = require('kyanite/and')"},"standard":{"title":"Standard","code":"import and from 'kyanite/and'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/and.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/and.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Function","title":"complement","desc":"Takes a function and returns a new function that when called returns the opposite truthy/falsy value of\rwhat was passed in.","examples":["const isNot = complement(is(String));\r\risNot(1); // => true\risNot('test'); // => false"],"returns":[{"type":{"names":["function"]},"description":"Returns the opposite function back"}],"params":[{"type":{"names":["function"]},"description":"The function we want to apply the complement of","name":"fn"},{"type":{"names":["Any"]},"description":"The value our functionality is being ran against","name":"a"}],"syntax":"complement(fn, a)","usage":{"commonjs":{"title":"CommonJs","code":"const complement = require('kyanite/complement')"},"standard":{"title":"Standard","code":"import complement from 'kyanite/complement'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/complement.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/complement.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Function","title":"curry","desc":"Create a curried function","examples":["const add = curry((a, b) => a + b);\r\radd(1)(2); // => 3\radd(1, 2); // => 3"],"returns":[{"type":{"names":["Any"]},"description":"Returns based on the function sent in"}],"params":[{"type":{"names":["function"]},"description":"The function we will be running","name":"f"},{"type":{"names":["Any"]},"description":"extra args to apply if needed","name":"args"}],"syntax":"curry(f, args)","usage":{"commonjs":{"title":"CommonJs","code":"const curry = require('kyanite/curry')"},"standard":{"title":"Standard","code":"import curry from 'kyanite/curry'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/curry.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/curry.js\"></script>"}}},{"since":"Unknown","deprecated":false,"category":"Function","title":"curryN","desc":"Acts like curry but this one expects you to tell it how many arguments to expect\rthis allows it to work well with rest parameters and default params.","examples":["const add = curryN(2, (a, b) => a + b);\r\radd(1)(2); // => 3\radd(1, 2); // => 3\r\rconst sum = add(1);\r\rsum(2); // => 3\rsum(4); // => 5\r\rconst add2 = curryN(2, (a, b = 1) => a + b);\rconst sum1 = add(1);\r\rsum1(4); // => 5\rsum1(undefined); // => 2"],"returns":[{"type":{"names":["Any"]},"description":"Returns based on the results of the function passed in"}],"params":[{"type":{"names":["Number"]},"description":"The number of arguments the function is expecting","name":"n"},{"type":{"names":["function"]},"description":"The function we are going to be running with said arguments","name":"f"},{"type":{"names":["Any"]},"description":"The arguments to apply to said function curry wont execute until this length matches n","name":"args"}],"syntax":"curryN(n, f, args)","usage":{"commonjs":{"title":"CommonJs","code":"const curryN = require('kyanite/curryN')"},"standard":{"title":"Standard","code":"import curryN from 'kyanite/curryN'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/curryN.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/curryN.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Function","title":"deepClone","desc":"Clones the object sent in (Hard Clone)","examples":["const data = { test: 1 }\rconst cloned = deepClone(data); // => { test: 1 }\r\rcloned.test = 2;\r\rconsole.log(data); // => { test: 1 }\rconsole.log(cloned); // => { test: 2 }"],"returns":[{"type":{"names":["Any"]},"description":"The newly cloned value"}],"params":[{"type":{"names":["Any"]},"description":"The value we want to get cloned","name":"x"}],"syntax":"deepClone(x)","usage":{"commonjs":{"title":"CommonJs","code":"const deepClone = require('kyanite/deepClone')"},"standard":{"title":"Standard","code":"import deepClone from 'kyanite/deepClone'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/deepClone.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/deepClone.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Function","title":"empty","desc":"Empties out the items of the sent value","examples":["empty({ test: 1 }) // => {}\rempty([1, 2, 3]) // => []\rempty('test') // => ''"],"returns":[{"type":{"names":["*"]},"description":"Returns the empty item"}],"params":[{"type":{"names":["*"]},"description":"The item to empty","name":"x"}],"syntax":"empty(x)","usage":{"commonjs":{"title":"CommonJs","code":"const empty = require('kyanite/empty')"},"standard":{"title":"Standard","code":"import empty from 'kyanite/empty'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/empty.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/empty.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Function","title":"fuzzySearch","desc":"Fuzzy search setup to look find things fast and effective","examples":["const results = fuzzySearch('te', 'test'); // => true\rconst results = fuzzySearch('dog', 'testing'); // => false\r\r// search is also curried\r\rconst search = fuzzySearch('te');\rconst results = search('test'); // => true"],"returns":[{"type":{"names":["Boolean"]},"description":"Returns a boolean determined by if the value is found or not by the search"}],"params":[{"type":{"names":["String"]},"description":"The Item to search","name":"n"},{"type":{"names":["String"]},"description":"The value to search for","name":"h"}],"syntax":"fuzzySearch(n, h)","usage":{"commonjs":{"title":"CommonJs","code":"const fuzzySearch = require('kyanite/fuzzySearch')"},"standard":{"title":"Standard","code":"import fuzzySearch from 'kyanite/fuzzySearch'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/fuzzySearch.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/fuzzySearch.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Function","title":"gt","examples":["gt(2, 1) // => true\rgt('b', 'a') // => true\r\r// It's also curried\r\rconst g = gt(2)\r\rg(1) // => true\rg(2) // => false"],"returns":[{"type":{"names":["Boolean"]},"description":"Based on the outcome of the logic a Boolean"}],"params":[{"type":{"names":["Any"]},"description":"Value to determine if it is greater than the other","name":"a"},{"type":{"names":["Any"]},"description":"Value to compare to see if it is less than the other","name":"b"}],"syntax":"gt(a, b)","usage":{"commonjs":{"title":"CommonJs","code":"const gt = require('kyanite/gt')"},"standard":{"title":"Standard","code":"import gt from 'kyanite/gt'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/gt.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/gt.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Function","title":"gte","examples":["gte(2, 1) // => true\rgte(1, 1) // => true\rgte('b', 'a') // => true\r\r// It's also curried\r\rconst g = gte(2)\r\rg(1) // => true\rg(2) // => true\rg(3) // => false"],"returns":[{"type":{"names":["Boolean"]},"description":"Based on the outcome of the logic a Boolean"}],"params":[{"type":{"names":["Any"]},"description":"Value to determine if it is greater than or equal to the other","name":"a"},{"type":{"names":["Any"]},"description":"Value to compare to see if it is less than or equal to the other","name":"b"}],"syntax":"gte(a, b)","usage":{"commonjs":{"title":"CommonJs","code":"const gte = require('kyanite/gte')"},"standard":{"title":"Standard","code":"import gte from 'kyanite/gte'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/gte.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/gte.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Function","title":"identity","desc":"A function that returns the value passed to it","examples":["identity(10); // => 10\r\rconst test = identity(10);\r\rconsole.log(typeof test.constructor); // => 'function'\rconsole.log(10.constructor); // => error\r\rfilter(identity, [0, 'cool', null, 1]); // => ['cool', 1]"],"returns":[{"type":{"names":["Any"]},"description":"The value"}],"params":[{"type":{"names":["Any"]},"description":"The value to return","name":"a"}],"syntax":"identity(a)","usage":{"commonjs":{"title":"CommonJs","code":"const identity = require('kyanite/identity')"},"standard":{"title":"Standard","code":"import identity from 'kyanite/identity'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/identity.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/identity.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Function","title":"is","desc":"See if an object is an instance of the supplied constructor, this will also check up the inheritence chain","examples":["is(Object, {}); // => true\ris(Array, []); // => true\ris(String, ''); // => true\ris(Number, 0); // => true\ris(Boolean, true); // => true\ris(Function, a => a); // => true\ris(RegExp, /[0-9]/g); // => true\r\r// It is curried as well\r\rconst isObject = is(Object);\r\risObject({}); // => true\r\r// Gotchas\r// Since it is a light check you need to watch how you run into sitatuions like this\ris(Object, {}); // => true\ris(Object, []); // => true"],"returns":[{"type":{"names":["Boolean"]}}],"params":[{"type":{"names":["Object"]},"description":"A Constructor","name":"Ctor"},{"type":{"names":["*"]},"description":"The value to test","name":"x"}],"syntax":"is(Ctor, x)","usage":{"commonjs":{"title":"CommonJs","code":"const is = require('kyanite/is')"},"standard":{"title":"Standard","code":"import is from 'kyanite/is'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/is.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/is.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Function","title":"isEmpty","desc":"Determines if the entered value is empty or not","examples":["isEmpty([]) // => true\risEmpty({}) // => true\risEmpty('') // => true\risEmpty(NaN) // => true\risEmpty(null) // => true\risEmpty(undefined) // => true\risEmpty(true) // => true\risEmpty(false) // => true"],"returns":[{"type":{"names":["Boolean"]},"description":"Returns the boolean after running our check"}],"params":[{"type":{"names":["Any"]},"description":"Value to check against","name":"x"}],"syntax":"isEmpty(x)","usage":{"commonjs":{"title":"CommonJs","code":"const isEmpty = require('kyanite/isEmpty')"},"standard":{"title":"Standard","code":"import isEmpty from 'kyanite/isEmpty'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/isEmpty.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/isEmpty.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Function","title":"juxt","desc":"Applies the provided function and turns them into a single function you can use on a value","examples":["const getRange = juxt([Math.min, Math.max]);\r\rgetRange(3, 4, 9, -3); // => [-3, 9]"],"returns":[{"type":{"names":["function"]},"description":"The function you can use on your data value"}],"params":[{"type":{"names":["Array"]},"description":"An array of functions to apply","name":"fns"}],"syntax":"juxt(fns)","usage":{"commonjs":{"title":"CommonJs","code":"const juxt = require('kyanite/juxt')"},"standard":{"title":"Standard","code":"import juxt from 'kyanite/juxt'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/juxt.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/juxt.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Function","title":"lt","examples":["lt(1, 2) // => true\rlt('a', 'b') // => true\r\r// It's also curried\r\rconst g = lt(2)\r\rg(1) // => false\rg(2) // => false\rg(3) // => true"],"returns":[{"type":{"names":["Boolean"]},"description":"Based on the outcome of the logic a Boolean"}],"params":[{"type":{"names":["Any"]},"description":"Value to determine if it is greater than the other","name":"a"},{"type":{"names":["Any"]},"description":"Value to compare to see if it is less than the other","name":"b"}],"syntax":"lt(a, b)","usage":{"commonjs":{"title":"CommonJs","code":"const lt = require('kyanite/lt')"},"standard":{"title":"Standard","code":"import lt from 'kyanite/lt'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/lt.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/lt.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Function","title":"lte","examples":["lte(1, 2) // => true\rlte(1, 1) // => true\rlte('a', 'b') // => true\r\r// It's also curried\r\rconst g = lte(2)\r\rg(1) // => false\rg(2) // => true\rg(3) // => true"],"returns":[{"type":{"names":["Boolean"]},"description":"Based on the outcome of the logic a Boolean"}],"params":[{"type":{"names":["Any"]},"description":"Value to determine if it is greater than or equal to the other","name":"a"},{"type":{"names":["Any"]},"description":"Value to compare to see if it is less than or equal to the other","name":"b"}],"syntax":"lte(a, b)","usage":{"commonjs":{"title":"CommonJs","code":"const lte = require('kyanite/lte')"},"standard":{"title":"Standard","code":"import lte from 'kyanite/lte'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/lte.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/lte.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Function","title":"not","desc":"Returns boolean based on if the value is not","examples":["const reverse = not(true); // => false"],"returns":[{"type":{"names":["Boolean"]},"description":"Returns boolean back based on the results"}],"params":[{"type":{"names":["Boolean"]},"description":"The values to compare against","name":"x"}],"syntax":"not(x)","usage":{"commonjs":{"title":"CommonJs","code":"const not = require('kyanite/not')"},"standard":{"title":"Standard","code":"import not from 'kyanite/not'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/not.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/not.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Function","title":"or","desc":"Runs an or comparison on the two values passed in","examples":["or(true, true); // => true\ror(true, false); // => true\ror(false, false); // => false"],"returns":[{"type":{"names":["Boolean"]},"description":"The evaluated outcome of the parameters"}],"params":[{"type":{"names":["Boolean"]},"description":"The first boolean to compare","name":"a"},{"type":{"names":["Boolean"]},"description":"The second boolean to compare","name":"b"}],"syntax":"or(a, b)","usage":{"commonjs":{"title":"CommonJs","code":"const or = require('kyanite/or')"},"standard":{"title":"Standard","code":"import or from 'kyanite/or'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/or.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/or.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Function","title":"pipe","desc":"Applies a sequence of transformations over a value.","examples":["pipe([add(2), mul(2)], 10); // => 24\r\r// It's also curried\r\rconst piper = pipe([add(2), mul(2)]);\r\rpiper(10); // => 24"],"returns":[{"type":{"names":["Any"]},"description":"The transformed value"}],"params":[{"type":{"names":["Array"]},"description":"The array of functions to apply to our value","name":"list"},{"type":{"names":["Any"]},"description":"The value to apply our functions too","name":"a"}],"syntax":"pipe(list, a)","usage":{"commonjs":{"title":"CommonJs","code":"const pipe = require('kyanite/pipe')"},"standard":{"title":"Standard","code":"import pipe from 'kyanite/pipe'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/pipe.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/pipe.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Function","title":"range","desc":"Create an array range from start to end","examples":["const test = range(3, 7); // => [3, 4, 5, 6]\rconst test = range(3); // => [0, 1, 2];"],"returns":[{"type":{"names":["Array"]},"description":"Returns an array of numbers consisting of the range"}],"params":[{"type":{"names":["Number"]},"description":"Starting number for the range","name":"from"},{"type":{"names":["Number"]},"description":"Number to end on for the range","name":"to"}],"syntax":"range(from, to)","usage":{"commonjs":{"title":"CommonJs","code":"const range = require('kyanite/range')"},"standard":{"title":"Standard","code":"import range from 'kyanite/range'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/range.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/range.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Function","title":"type","desc":"Finds the type of the sent value","examples":["type({}); // => 'Object'\rtype([]); // => 'Array'\rtype(null); // => 'Null'\rtype(undefined); // => 'Undefined'\rtype('hi'); // => 'String'\rtype(1); // => 'Number'\rtype(/1/g); // => 'RegExp'\rtype(new Date()); // => 'Date'\rtype(true); // => 'Boolean'"],"returns":[{"type":{"names":["String"]},"description":"A string based on the type of the value passed in"}],"params":[{"type":{"names":["Any"]},"description":"The value to test","name":"x"}],"syntax":"type(x)","usage":{"commonjs":{"title":"CommonJs","code":"const type = require('kyanite/type')"},"standard":{"title":"Standard","code":"import type from 'kyanite/type'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/type.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/type.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Function","title":"when","examples":["when(x => x > 2, x => x * 2, 5) // => 10\rwhen(x => x > 5, x => x * 2, 5) // => undefined\r\r// It's also curried\r\rconst w = when(x => x > 2, x => x * 2)\r\rw(5) // => 10\rw(1) // => undefined"],"returns":[{"type":{"names":["Any"]},"description":"Returns whatever the action function returns, or undefined"}],"params":[{"type":{"names":["function"]},"description":"The function that when passed, do the action","name":"fn"},{"type":{"names":["function"]},"description":"The function fired when the logic passes","name":"act"},{"type":{"names":["Any"]},"description":"The arguments to pass to both functions","name":"args"}],"syntax":"when(fn, act, args)","usage":{"commonjs":{"title":"CommonJs","code":"const when = require('kyanite/when')"},"standard":{"title":"Standard","code":"import when from 'kyanite/when'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/when.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/when.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Number","title":"add","desc":"Adds the provided items together","examples":["add(1, 2); // => 3\r\r// It's also curried\r\rconst adder = add(2);\r\radder(3); // => 5\radder(2); // => 4"],"returns":[{"type":{"names":["Number"]},"description":"The sum of the numbers"}],"params":[{"type":{"names":["Number"]},"description":"The first number to add","name":"a"},{"type":{"names":["Number"]},"description":"The second number to add","name":"b"}],"syntax":"add(a, b)","usage":{"commonjs":{"title":"CommonJs","code":"const add = require('kyanite/add')"},"standard":{"title":"Standard","code":"import add from 'kyanite/add'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/add.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/add.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Number","title":"div","desc":"Divides the provided items","examples":["div(2, 1) // => 2\r\r// It's also curried\r\rconst divide = div(15)\r\rdivide(3) // => 5\rdivide(5) // => 3"],"returns":[{"type":{"names":["Number"]},"description":"The quotient of the two numbers"}],"params":[{"type":{"names":["Number"]},"description":"The dividend of the division problem","name":"a"},{"type":{"names":["Number"]},"description":"The divisor which the dividend will be divided by","name":"b"}],"syntax":"div(a, b)","usage":{"commonjs":{"title":"CommonJs","code":"const div = require('kyanite/div')"},"standard":{"title":"Standard","code":"import div from 'kyanite/div'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/div.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/div.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Number","title":"gcd","desc":"Determines the greatest common denominator of the numbers passed in","examples":["gcd(80, 90); // => 10\rgcd(20, 600); // => 20\r\r// It's also curried\r\rconst a = gcd(80);\r\ra(90); // => 10\ra(93); // => 1"],"returns":[{"type":{"names":["Number"]},"description":"The Greatest Common Denominator"}],"params":[{"type":{"names":["Number"]},"description":"The First number to use","name":"a"},{"type":{"names":["Number"]},"description":"The Second number to use","name":"b"}],"syntax":"gcd(a, b)","usage":{"commonjs":{"title":"CommonJs","code":"const gcd = require('kyanite/gcd')"},"standard":{"title":"Standard","code":"import gcd from 'kyanite/gcd'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/gcd.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/gcd.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Number","title":"lcm","desc":"Finds the least common multiple of the provided numbers","examples":["lcm(90, 70); // => 630\rlcm(91, 4); // => 364\r\r// It's also curried\r\rconst a = lcm(90);\r\ra(70); // => 630\ra(4); // => 180"],"returns":[{"type":{"names":["Number"]},"description":"The least common multiple of the two numbers"}],"params":[{"type":{"names":["Number"]},"description":"The first number to use","name":"a"},{"type":{"names":["Number"]},"description":"The second number to use","name":"b"}],"syntax":"lcm(a, b)","usage":{"commonjs":{"title":"CommonJs","code":"const lcm = require('kyanite/lcm')"},"standard":{"title":"Standard","code":"import lcm from 'kyanite/lcm'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/lcm.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/lcm.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Number","title":"mul","desc":"Multiplies the provided items","examples":["mul(2, 1); // => 2\r\r// It's also curried\r\rconst multiply = mul(5);\r\rmultiply(3); // => 15\rmultiply(2); // => 10"],"returns":[{"type":{"names":["Number"]},"description":"The product of the numbers"}],"params":[{"type":{"names":["Number"]},"description":"The first factor to multiply with","name":"a"},{"type":{"names":["Number"]},"description":"The second factor to multiply with","name":"b"}],"syntax":"mul(a, b)","usage":{"commonjs":{"title":"CommonJs","code":"const mul = require('kyanite/mul')"},"standard":{"title":"Standard","code":"import mul from 'kyanite/mul'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/mul.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/mul.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Number","title":"round","desc":"Round a number using exponent rounding","examples":["round(2, 112.336); // => 112.34\rround(3, 112.3354); // => 112.335\r\r// It is curried\rconst rounder = round(3);\r\rrounder(122.4456); // => 112.446\rrounder(122.332); // => 122.332"],"returns":[{"type":{"names":["Number"]},"description":"The rounded number to the desired precision"}],"params":[{"type":{"names":["Number"]},"description":"The precision we want the number to be rounded to","name":"precision"},{"type":{"names":["Number"]},"description":"The number we are going to round","name":"num"}],"syntax":"round(precision, num)","usage":{"commonjs":{"title":"CommonJs","code":"const round = require('kyanite/round')"},"standard":{"title":"Standard","code":"import round from 'kyanite/round'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/round.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/round.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Number","title":"sub","desc":"Subtracts the provided items","examples":["sub(2, 1); // => 1\r\r// It's also curried\r\rconst subtract = sub(5);\r\rsubtract(3); // => 2\rsubtract(2); // => 3"],"returns":[{"type":{"names":["Number"]},"description":"The difference of the numbers"}],"params":[{"type":{"names":["Number"]},"description":"The number to subtract from","name":"a"},{"type":{"names":["Number"]},"description":"The number to subtract with","name":"b"}],"syntax":"sub(a, b)","usage":{"commonjs":{"title":"CommonJs","code":"const sub = require('kyanite/sub')"},"standard":{"title":"Standard","code":"import sub from 'kyanite/sub'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/sub.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/sub.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Object","title":"any","desc":"Works a lot like every for array, but for the object data type. Returns whether every key matches the predicate or not","examples":["const run = any({\r a: x => x === 'foo',\r b: x => x !== 'bar'\r})\r\rrun({ a: 'foo', b: 'xxx', x: 11, y: 19 }) // => true\rrun({ a: 'xxx', b: 'bar' }) // => false"],"returns":[{"type":{"names":["Boolean"]},"description":"A boolean dependent on whether or not any values passed"}],"params":[{"type":{"names":["Object"]},"description":"An Object schema containing the matching properties and the function to run","name":"schema"},{"type":{"names":["Object"]},"description":"The object to run through","name":"obj"}],"syntax":"any(schema, obj)","usage":{"commonjs":{"title":"CommonJs","code":"const any = require('kyanite/any')"},"standard":{"title":"Standard","code":"import any from 'kyanite/any'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/any.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/any.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Object","title":"assign","desc":"Create a new object from the provided objects in the parameters defaults to Object.assign if able","examples":["assign({ a: 1 }); // => { a: 1 }\rassign({ test: 1 }, { thing: 2 }); // => { test: 1, thing: 2 }\rassign({ a: 1, b: 2, c: 3 }, { c: 5, d: 3 }); // => { a: 1, b: 2, c: 5, d: 3 }\rassign({ a: 1 }, { b: 2 }, { c: 5 }, { c: 3 }, { d: 4 }); // => { a: 1, b: 2, c: 3, d: 4 }"],"returns":[{"type":{"names":["Object"]},"description":"A new Object"}],"params":[{"type":{"names":["Object"]},"description":"The object(s) we want to combine","name":"args"}],"syntax":"assign(args)","usage":{"commonjs":{"title":"CommonJs","code":"const assign = require('kyanite/assign')"},"standard":{"title":"Standard","code":"import assign from 'kyanite/assign'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/assign.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/assign.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Object","title":"compress","desc":"Takes an object and compresses it down removing undefined or null values","examples":["compress({ thing: '', test: 1, other: undefined }); // => { thing: '', test: 1 }\rcompress({ thing: '', test: 1, other: null }); // => { thing: '', test: 1 }"],"returns":[{"type":{"names":["Object"]},"description":"Returns a new object without the unwanted values"}],"params":[{"type":{"names":["Object"]},"description":"The Object to compress","name":"obj"}],"syntax":"compress(obj)","usage":{"commonjs":{"title":"CommonJs","code":"const compress = require('kyanite/compress')"},"standard":{"title":"Standard","code":"import compress from 'kyanite/compress'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/compress.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/compress.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Object","title":"defaults","desc":"Applies default properties to an object that does not contain the smae or contains falsey values on those properties","examples":["defaults({ test: 1, thing: 2 }, { thing: 4 }) // => { test: 1, thing: 4 }\r\r// It's also curried\r\rconst def = defaults({ test: 1, thing: 2 })\r\rdef({ thing: 4 }) // => { test: 1, thing: 4 }"],"returns":[{"type":{"names":["Object"]},"description":"A New object"}],"params":[{"type":{"names":["Object"]},"description":"The default object to reference","name":"def"},{"type":{"names":["Object"]},"description":"The data object to loop through","name":"data"}],"syntax":"defaults(def, data)","usage":{"commonjs":{"title":"CommonJs","code":"const defaults = require('kyanite/defaults')"},"standard":{"title":"Standard","code":"import defaults from 'kyanite/defaults'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/defaults.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/defaults.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Object","title":"entries","desc":"Creates an array of arrays with the key value pairs of an object","examples":["entries({ a: 1, b: 2, c: 3 }); // => [['a', 1], ['b', 2], ['c', 3]]"],"returns":[{"type":{"names":["Array"]},"description":"An array of arrays with the key value pairs from the object"}],"params":[{"type":{"names":["Object"]},"description":"The object we want to grab our data from","name":"obj"}],"syntax":"entries(obj)","usage":{"commonjs":{"title":"CommonJs","code":"const entries = require('kyanite/entries')"},"standard":{"title":"Standard","code":"import entries from 'kyanite/entries'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/entries.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/entries.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Object","title":"gets","desc":"Pulls a list of values from an object and returns them as an array","examples":["gets(['a', 'b'], { a: 1, b: 2, c: 3 }) // => [1, 2]\r\r// It's also curried\r\rconst g = gets(['a', 'b'])\r\rg({ a: 1, b: 2, c: 3 }) // => [1, 2]"],"returns":[{"type":{"names":["Array"]},"description":"An array of values pulled from the object"}],"params":[{"type":{"names":["Array"]},"description":"The list of properties to get values from","name":"keys"},{"type":{"names":["Object"]},"description":"The object to map through","name":"obj"}],"syntax":"gets(keys, obj)","usage":{"commonjs":{"title":"CommonJs","code":"const gets = require('kyanite/gets')"},"standard":{"title":"Standard","code":"import gets from 'kyanite/gets'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/gets.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/gets.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Object","title":"has","desc":"Determines if the object has a property","examples":["const obj = has('thing', { test: 1, thing: 2 }); // => true\r\r// has is also curried\r\rconst propSet = has('thing');\r\rpropSet({ test: 1, thing: 2 }); // => true"],"returns":[{"type":{"names":["Boolean"]},"description":"Returns based on if the prop is found or not"}],"params":[{"type":{"names":["String"]},"description":"The prop to look for","name":"prop"},{"type":{"names":["Object"]},"description":"The Object we are searching","name":"obj"}],"syntax":"has(prop, obj)","usage":{"commonjs":{"title":"CommonJs","code":"const has = require('kyanite/has')"},"standard":{"title":"Standard","code":"import has from 'kyanite/has'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/has.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/has.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Object","title":"height","desc":"Works a lot like length for arrays, but allows you to get the length of an object","examples":["height({ a: 1, b: 2 }) // => 2"],"returns":[{"type":{"names":["Number"]},"description":"The length of the object"}],"params":[{"type":{"names":["Object"]},"description":"The object we want to read the length of","name":"obj"}],"syntax":"height(obj)","usage":{"commonjs":{"title":"CommonJs","code":"const height = require('kyanite/height')"},"standard":{"title":"Standard","code":"import height from 'kyanite/height'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/height.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/height.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Object","title":"omit","desc":"Create a new Array/Object by omitting the requested values","examples":["const obj = omit('test', { test: '3432', thing: 123 }); // => { thing: 123 }\rconst arr = omit(['a', 'b'], { a: 1, b: 2, c: 3}); // => { c: 3 }\r\r// omit is curried\r\rconst omitKeys = omit('test');\r\romitKeys({ test: '3432', thing: 123 }); // => { thing: 123 }"],"returns":[{"type":{"names":["Object"]},"description":"Returns the newly created data without the omitted values"}],"params":[{"type":{"names":["Array"]},"description":"The key(s) in which to omit from the data","name":"key"},{"type":{"names":["Object"]},"description":"The object to search through and filter","name":"x"}],"syntax":"omit(key, x)","usage":{"commonjs":{"title":"CommonJs","code":"const omit = require('kyanite/omit')"},"standard":{"title":"Standard","code":"import omit from 'kyanite/omit'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/omit.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/omit.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Object","title":"path","desc":"Find an item based on the function sent in and its list","examples":["path(['a', 'b'], { a: { b: 3 } }) // => 3\rpath(['a', 'b', 'c'], { a: 3 }) // => undefined\r\r// Is also curried\r\rconst safetyPath = path(['a', 'b'])\r\rsafetyPath({ a: { b: 2 } }) // => 2"],"returns":[{"type":{"names":["Any"]},"description":"Returns Data if found, undfined if not"}],"params":[{"type":{"names":["Array"]},"description":"The path to safely traverse the object with","name":"keys"},{"type":{"names":["Object"]},"description":"The object to traverse","name":"obj"}],"syntax":"path(keys, obj)","usage":{"commonjs":{"title":"CommonJs","code":"const path = require('kyanite/path')"},"standard":{"title":"Standard","code":"import path from 'kyanite/path'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/path.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/path.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Object","title":"plan","desc":"Uses a schema to apply a map like functionality on a given object","examples":["const testFns = {\r\n    a: x => x * 2,\r\n    b: x => x + 10\r\n  }\r\rplan(testFns, { a: 5, b: 10 }) // => { a: 10, b: 20 }\r\r// It's also curried\r\rconst p = plan(testFns)\r\rp({ a: 5, b: 10 }) // => { a: 10, b: 20 }"],"returns":[{"type":{"names":["Object"]},"description":"A new object with the updated data from our applied functions"}],"params":[{"type":{"names":["Object"]},"description":"The object of functions we want to apply","name":"schema"},{"type":{"names":["Object"]},"description":"The object to apply our functions too","name":"obj"}],"syntax":"plan(schema, obj)","usage":{"commonjs":{"title":"CommonJs","code":"const plan = require('kyanite/plan')"},"standard":{"title":"Standard","code":"import plan from 'kyanite/plan'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/plan.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/plan.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Object","title":"pluck","desc":"Recursively digs through objects to create a new list of values based on the provided property name and provided object","examples":["pluck('val', { a: { val: 3 }, b: { val: 5 } }); // => { a: 3, b: 5 }\r\r// It is also curried\rconst plucker = pluck('a');\r\rplucker([{ a: 1 }, { a: 2 }]); // => [1, 2]"],"returns":[{"type":{"names":["Array"]},"description":"The new list which will be the same type as the list provided"}],"params":[{"type":{"names":["String"]},"description":"The property to look for","name":"p"},{"type":{"names":["Array","Object"]},"description":"An array of objects or a single object to pluck through","name":"list"}],"syntax":"pluck(p, list)","usage":{"commonjs":{"title":"CommonJs","code":"const pluck = require('kyanite/pluck')"},"standard":{"title":"Standard","code":"import pluck from 'kyanite/pluck'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/pluck.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/pluck.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Object","title":"prop","desc":"Brings back the indicated property of an object if it exists","examples":["prop('thing', { thing: 'test' }); // => 'test'\rprop('thing', {}); // => undefined\rmap(prop('a'), [{ a: 1 }, { a: 2 }, { a: 3 }]); // => [1, 2, 3]\r\r// It is also curried\r\rconst proper = prop('a');\r\rproper({ a: 1, b: 2 }); // => 1"],"returns":[{"type":{"names":["Any"]},"description":"The value that exists at 'obj.p'"}],"params":[{"type":{"names":["Array"]},"description":"The array path of the property we are looking for","name":"p"},{"type":{"names":["Object"]},"description":"The object to search through","name":"obj"}],"syntax":"prop(p, obj)","usage":{"commonjs":{"title":"CommonJs","code":"const prop = require('kyanite/prop')"},"standard":{"title":"Standard","code":"import prop from 'kyanite/prop'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/prop.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/prop.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Object","title":"sift","desc":"Works a lot like an array filter, but for the object data type","examples":["sift(['id', 'thing'], { id: 44, thing: 'test', other: 'cool' }) // => { id: 44, thing: 'test' }\r\r// It's also curried\r\rconst sifter = sift(['id', 'thing'])\r\rsifter({ id: 44, thing: 'test', other: 'cool' }) // => { id: 44, thing: 'test' }"],"returns":[{"type":{"names":["Object"]},"description":"A new filtered out object"}],"params":[{"type":{"names":["Array"]},"description":"An array of properties to filter for","name":"arr"},{"type":{"names":["Object"]},"description":"The object to sift through","name":"obj"}],"syntax":"sift(arr, obj)","usage":{"commonjs":{"title":"CommonJs","code":"const sift = require('kyanite/sift')"},"standard":{"title":"Standard","code":"import sift from 'kyanite/sift'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/sift.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/sift.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Object","title":"values","desc":"Grabs the values from a key value pair object","examples":["value({ a: 1, b: 2, c: 3 }); // => [1, 2, 3]"],"returns":[{"type":{"names":["Array"]},"description":"An array of values from the object"}],"params":[{"type":{"names":["Object"]},"description":"The object we want to grab our values from","name":"obj"}],"syntax":"values(obj)","usage":{"commonjs":{"title":"CommonJs","code":"const values = require('kyanite/values')"},"standard":{"title":"Standard","code":"import values from 'kyanite/values'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/values.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/values.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Object","title":"whole","desc":"Works a lot like every for array, but for the object data type. Returns whether every key matches the predicate or not","examples":["const run = whole({ a: x => x === 'foo', b: x => x !== 'bar', x: x => x > 10, y: x => x < 20 })\r\rrun({ a: 'foo', b: 'xxx', x: 11, y: 19 }) // => true\rrun({ a: 'xxx', b: 'xxx', x: 11, y: 19 }) // => false"],"returns":[{"type":{"names":["Boolean"]},"description":"A boolean dependent on whether or not all values passed"}],"params":[{"type":{"names":["Object"]},"description":"An Object schema containing the matching properties and the function to run","name":"schema"},{"type":{"names":["Object"]},"description":"The object to sift through","name":"obj"}],"syntax":"whole(schema, obj)","usage":{"commonjs":{"title":"CommonJs","code":"const whole = require('kyanite/whole')"},"standard":{"title":"Standard","code":"import whole from 'kyanite/whole'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/whole.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/whole.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Relation","title":"identical","desc":"Performs a check to see if the items are identical in the sense that they reference the same memory","examples":["identical(NaN, NaN) // => true\ridentical([1], [1]) // => false\r\rconst o = {}\r\ridentical({}, {}) // => false\ridentical(o, o) // => true\r\r// Identical is also curried\r\rconst test = identical(NaN)\rtest(NaN) // => true"],"returns":[{"type":{"names":["Boolean"]},"description":"Returns a boolean based on the check"}],"params":[{"type":{"names":["Any"]},"description":"The first value to compare","name":"a"},{"type":{"names":["Any"]},"description":"The second value to compare","name":"b"}],"syntax":"identical(a, b)","usage":{"commonjs":{"title":"CommonJs","code":"const identical = require('kyanite/identical')"},"standard":{"title":"Standard","code":"import identical from 'kyanite/identical'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/identical.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/identical.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Relation","title":"isEqual","desc":"Takes and compares two items. Capable of handling cyclical data structures","examples":["const obj = isEqual({}, {}); // => true\rconst arr = isEqual([], []); // => true"],"returns":[{"type":{"names":["Boolean"]},"description":"Returns the boolean after running our comparison check"}],"params":[{"type":{"names":["Any"]},"description":"First item to compare","name":"a"},{"type":{"names":["Any"]},"description":"Second item to compare","name":"b"}],"syntax":"isEqual(a, b)","usage":{"commonjs":{"title":"CommonJs","code":"const isEqual = require('kyanite/isEqual')"},"standard":{"title":"Standard","code":"import isEqual from 'kyanite/isEqual'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/isEqual.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/isEqual.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"Relation","title":"isNil","desc":"Checks if the value is a null value","examples":["isNill(null); // => true\risNill(); // => true\risNill(1); // => false"],"returns":[{"type":{"names":["Boolean"]},"description":"Returns a boolean based on the check"}],"params":[{"type":{"names":["Any"]},"description":"The value to run our test against","name":"x"}],"syntax":"isNil(x)","usage":{"commonjs":{"title":"CommonJs","code":"const isNil = require('kyanite/isNil')"},"standard":{"title":"Standard","code":"import isNil from 'kyanite/isNil'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/isNil.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/isNil.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"String","title":"capitalize","desc":"Capitalizes the first letter of a string","examples":["capitalize('test'); // => 'Test'\rcapitalize('small brown cow'); // => 'Small brown cow'"],"returns":[{"type":{"names":["String"]},"description":"The capitalized string"}],"params":[{"type":{"names":["String"]},"description":"The string we want to capitalize","name":"str"}],"syntax":"capitalize(str)","usage":{"commonjs":{"title":"CommonJs","code":"const capitalize = require('kyanite/capitalize')"},"standard":{"title":"Standard","code":"import capitalize from 'kyanite/capitalize'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/capitalize.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/capitalize.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"String","title":"includes","desc":"Goes through a provided string and attempts to find the provided value within it","examples":["includes('cow', 'small brown cow'); // => true\rincludes('cow', 'Small Brown Cow'); // => true\r\rconst x = 'cow';\r\rincludes('cow', `small brown ${x}`); // => true\r\r// It's also curried\r\rconst checker = includes('cow');\r\rchecker('small brown cow'); // => true"],"returns":[{"type":{"names":["Boolean"]},"description":"Based on if the string is found or not"}],"params":[{"type":{"names":["String"]},"description":"The string we want to search through","name":"str"},{"type":{"names":["String"]},"description":"The string we want to find","name":"a"}],"syntax":"includes(str, a)","usage":{"commonjs":{"title":"CommonJs","code":"const includes = require('kyanite/includes')"},"standard":{"title":"Standard","code":"import includes from 'kyanite/includes'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/includes.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/includes.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"String","title":"trim","desc":"Accepts a string value and trims it's white space","examples":["trim('my new cow   '); // => 'my new cow'\rtrim('   new things   '); // => 'new things'"],"returns":[{"type":{"names":["String"]},"description":"The trimmed string"}],"params":[{"type":{"names":["String"]},"description":"The string to trim","name":"str"}],"syntax":"trim(str)","usage":{"commonjs":{"title":"CommonJs","code":"const trim = require('kyanite/trim')"},"standard":{"title":"Standard","code":"import trim from 'kyanite/trim'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/trim.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/trim.js\"></script>"}}},{"since":"v0.1.0","deprecated":false,"category":"String","title":"words","desc":"Takes a string and breaks the words down into an array","examples":["words('my brown cow'); // => ['my', 'brown', 'cow']"],"returns":[{"type":{"names":["Array"]},"description":"The words broken down into an array of strings"}],"params":[{"type":{"names":["String"]},"description":"The string we want to break down","name":"str"}],"syntax":"words(str)","usage":{"commonjs":{"title":"CommonJs","code":"const words = require('kyanite/words')"},"standard":{"title":"Standard","code":"import words from 'kyanite/words'"},"cdn":{"title":"CDN","code":"<script src=\"https://cdn.jsdelivr.net/npm/kyanite@0.1.0/words.js\"></script>"},"browser":{"title":"Browser","code":"<script src=\"path/to/modules/kyanite/words.js\"></script>"}}}]